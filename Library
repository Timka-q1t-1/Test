local CHEAT = {}

local userInputService = game:GetService('UserInputService')
local runService = game:GetService('RunService')
local tweenService = game:GetService('TweenService')
local coreGui = game:GetService('CoreGui')

local colors = {
	Black = Color3.fromRGB(0, 0, 0),
	DarkGray = Color3.fromRGB(40, 40, 40),
	Gray = Color3.fromRGB(80, 80, 80),
	LightGray = Color3.fromRGB(120, 120, 120),
	White = Color3.fromRGB(255, 255, 255)
}

local themes = {
	TextLabel = {
		FontFace = Font.new("rbxassetid://12187374537", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
		BackgroundColor3 = colors.Gray,
		BackgroundTransparency = 0.5,
		BorderSizePixel = 0,
		TextColor3 = colors.White,
		TextStrokeColor3 = colors.Black,
		TextScaled = true,
		TextStrokeTransparency = 0,
	},
	TextButton = {
		FontFace = Font.new("rbxassetid://12187374537", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
		BackgroundColor3 = colors.Gray,
		BackgroundTransparency = 0.75,
		BorderSizePixel = 0,
		TextColor3 = colors.White,
		TextStrokeColor3 = colors.Black,
		TextScaled = true,
		TextStrokeTransparency = 0,
	},
	Frame = {
		BackgroundColor3 = colors.DarkGray,
		BackgroundTransparency = 0.45,
		BorderSizePixel = 0,
	},
	ImageLabel = {
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		ImageColor3 = colors.DarkGray,
		ImageTransparency = 0.15
	},
	ScrollingFrame = {
		BackgroundColor3 = colors.DarkGray,
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		ScrollBarThickness = 0,
		CanvasSize = UDim2.new(0, 0, 0, 0),
		AutomaticCanvasSize = Enum.AutomaticSize.XY,
	},
	TextBox = {
		FontFace = Font.new("rbxassetid://12187374537", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
		BackgroundColor3 = colors.Gray,
		BackgroundTransparency = 0.5,
		BorderSizePixel = 0,
		TextColor3 = colors.White,
		TextStrokeColor3 = colors.Black,
		TextScaled = true,
		PlaceholderText = "Enter...",
		ClearTextOnFocus = false,
	}
}

local function UICorner(parent)
	local uiCorner = Instance.new('UICorner')
	uiCorner.CornerRadius = UDim.new(0, 5)
	uiCorner.Parent = parent
	return uiCorner
end

local function UIStroke(parent)
	local uiStroke = Instance.new('UIStroke')
	uiStroke.Color = Color3.fromRGB(255,255,255)
	uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	uiStroke.Parent = parent
	return uiStroke
end

local function UIListLayout(parent)
	local uiListLayout = Instance.new('UIListLayout')
	uiListLayout.Padding = UDim.new(0, 3)
	uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	uiListLayout.Parent = parent
	return uiListLayout
end

local function UIPadding(parent, num)
	local uiPadding = Instance.new('UIPadding')
	uiPadding.PaddingTop = UDim.new(0, num)
	uiPadding.PaddingLeft = UDim.new(0, num)
	uiPadding.PaddingRight = UDim.new(0, num)
	uiPadding.PaddingBottom = UDim.new(0, num)
	uiPadding.Parent = parent
	return uiPadding
end

local function ApplyTheme(instance, themeName)
	local theme = themes[themeName]
	if not theme then return end

	for property, value in pairs(theme) do
		if pcall(function() return instance[property] end) then
			instance[property] = value
		end
	end
end

function CHEAT.Hub(Name)
	local toggle = true
	local mouse = userInputService.MouseIconEnabled
	if not coreGui:FindFirstChild(Name..'_'..game:GetService('Players').LocalPlayer.UserId) then
		local Hub = Instance.new('ScreenGui', coreGui)
		Hub.Name = Name..'_'..game:GetService('Players').LocalPlayer.UserId
		Hub.IgnoreGuiInset = true
		Hub.ResetOnSpawn = false
		Hub.DisplayOrder = math.huge - 1

		local ShowMouse = Instance.new('TextButton', Hub)
		ShowMouse.Position = UDim2.new(0, 0, 0, 0)
		ShowMouse.Size = UDim2.new(0, 0, 0, 0)
		ShowMouse.Active = true
		ShowMouse.Modal = true
		ShowMouse.MaxVisibleGraphemes = 0

		local Open = Instance.new('TextButton', Hub)
		Open.Position = UDim2.new(0.5, 0, 0, 0)
		Open.Size = UDim2.new(0, 40, 0, 40)
		Open.Active = true
		Open.Draggable = true
		Open.MaxVisibleGraphemes = 0
		Open.Visible = false

		local Back = Instance.new('ImageLabel', Hub)
		Back.Position = UDim2.new(0.296, 0, 0.053, 0)
		Back.Size = UDim2.new(0, 300, 0, 350)
		Back.Image = 'rbxassetid://96488463895972'
		Back.Active = true
		Back.Draggable = true

		local TopPanel = Instance.new('Frame', Back)
		TopPanel.Size = UDim2.new(0, 300, 0, 30)
		TopPanel.BackgroundTransparency = 1

		local Close = Instance.new('TextButton', TopPanel)
		Close.Position = UDim2.new(0.9, 0, 0, 0)
		Close.Size = UDim2.new(0, 30, 0, 30)
		Close.FontFace.Bold = true
		Close.Text = 'X'

		local Title = Instance.new('TextLabel', TopPanel)
		Title.Position = UDim2.new(0.02, 0, 0, 0)
		Title.Size = UDim2.new(0, 200, 0, 30)
		Title.TextXAlignment = Enum.TextXAlignment.Left
		Title.Text = Name

		local List_Sections = Instance.new('ScrollingFrame', Back)
		List_Sections.Position = UDim2.new(0, 0, 0.086, 0)
		List_Sections.Size = UDim2.new(0, 300, 0, 45)
		UIPadding(List_Sections, 3)
		local FolderFunctions = Instance.new('Folder', Back)

		ApplyTheme(Back, Back.ClassName)
		ApplyTheme(Title, Title.ClassName)
		ApplyTheme(Close, Close.ClassName)
		ApplyTheme(Open, Open.ClassName)
		ApplyTheme(List_Sections, List_Sections.ClassName)

		Title.BackgroundTransparency = 1
		Close.BackgroundTransparency = 1
		List_Sections.AutomaticCanvasSize = Enum.AutomaticSize.X
		List_Sections.ScrollingDirection = Enum.ScrollingDirection.X

		local list = UIListLayout(List_Sections)
		list.FillDirection = Enum.FillDirection.Horizontal
		list.ItemLineAlignment = Enum.ItemLineAlignment.Center
		list.VerticalAlignment = Enum.VerticalAlignment.Center

		UICorner(Back)
		UICorner(Close)
		UICorner(Open).CornerRadius = UDim.new(0, 999)
		UICorner(TopPanel)

		UIStroke(Back)
		UIStroke(Close)

		UIStroke(Open)
		UIStroke(TopPanel)

		local function hide()
			toggle = not toggle
			Back.Visible = toggle
			Open.Visible = not toggle
			ShowMouse.Visible = toggle
			if mouse == true then return end
			print(1)
			userInputService.MouseIconEnabled = toggle
		end

		Open.MouseButton1Click:Connect(hide)
		Close.MouseButton1Click:Connect(hide)
		userInputService.InputBegan:Connect(function(input, process)
			if process then return end
			if input.KeyCode == Enum.KeyCode.K then
				hide()
			end            
		end)

		local Sections = {}

		function Sections.Section(name, color)
			if color == nil then
				color = colors.Gray
			end
			local order = 0
			local SectionButton = Instance.new('TextButton', List_Sections)
			SectionButton.Size = UDim2.new(0, 45, 0, 45)
			SectionButton.Text = name

			local SectionFunctions = Instance.new('ScrollingFrame', FolderFunctions)
			SectionFunctions.Position = UDim2.new(0, 0, 0.231, 0)
			SectionFunctions.Size = UDim2.new(0, 300, 0, 260)
			SectionFunctions.Visible = false
			ApplyTheme(SectionButton, SectionButton.ClassName)
			ApplyTheme(SectionFunctions, SectionFunctions.ClassName)

			local list = UIListLayout(SectionFunctions)
			list.FillDirection = Enum.FillDirection.Vertical

			UIPadding(SectionFunctions, 2)
			SectionButton.BackgroundColor3 = color
			SectionFunctions.AutomaticCanvasSize = Enum.AutomaticSize.Y
			SectionFunctions.ScrollingDirection = Enum.ScrollingDirection.Y
			UICorner(SectionButton)
			SectionButton.MouseButton1Click:Connect(function()
				for _, v in pairs(FolderFunctions:GetChildren()) do
					if v ~= SectionFunctions then
						v.Visible = false
					end
				end
				SectionFunctions.Visible = not SectionFunctions.Visible
			end)

			local Debirs = {}

			function Debirs.Title(name)
				order += 1
				local Title = Instance.new('TextLabel', SectionFunctions)
				Title.Size = UDim2.new(0, 300, 0, 20)
				Title.Text = name
				Title.LayoutOrder = order

				ApplyTheme(Title, Title.ClassName)
				UICorner(Title)
			end

			function Debirs.Active(name, funct)
				order += 1
				local Active = Instance.new('TextButton', SectionFunctions)
				Active.Size = UDim2.new(0, 300, 0, 45)
				Active.LayoutOrder = order
				Active.MaxVisibleGraphemes = 0

				local Check = Instance.new('Frame', Active)
				Check.Size = UDim2.new(0, 15, 0, 15)
				Check.Position = UDim2.new(0.950, 0, 0, 0)

				local Title = Instance.new('TextLabel', Active)
				Title.Size = UDim2.new(0, 175, 0, 35)
				Title.Position = UDim2.new(0.014, 0, 0.111, 0)
				Title.Text = name
				Title.TextXAlignment = Enum.TextXAlignment.Left

				ApplyTheme(Active, Active.ClassName)
				ApplyTheme(Check, Title.ClassName)
				ApplyTheme(Title, Title.ClassName)
				UICorner(Active)
				UICorner(Check)

				Check.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
				Title.BackgroundTransparency = 1
				local success, err = pcall(function()
					Active.MouseButton1Click:Connect(function()
						tweenService:Create(Check, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(85, 255, 0)}):Play()
						funct()
						wait(0.15)
						tweenService:Create(Check, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(255, 0, 0)}):Play()
					end)
				end)
			end

			function Debirs.Toggle(name, funct)
				order += 1
				local Active = Instance.new('TextButton', SectionFunctions)
				Active.Size = UDim2.new(0, 300, 0, 45)
				Active.LayoutOrder = order
				Active.MaxVisibleGraphemes = 0

				local Check = Instance.new('Frame', Active)
				Check.Size = UDim2.new(0, 15, 0, 15)
				Check.Position = UDim2.new(0.950, 0, 0, 0)

				local Title = Instance.new('TextLabel', Active)
				Title.Size = UDim2.new(0, 175, 0, 35)
				Title.Position = UDim2.new(0.014, 0, 0.111, 0)
				Title.Text = name
				Title.TextXAlignment = Enum.TextXAlignment.Left

				ApplyTheme(Active, Active.ClassName)
				ApplyTheme(Check, Title.ClassName)
				ApplyTheme(Title, Title.ClassName)
				UICorner(Active)
				UICorner(Check)
				Check.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
				Title.BackgroundTransparency = 1

				local toggleState = false
				local connection = nil
				local success, err = pcall(function()
					Active.MouseButton1Click:Connect(function()
						if connection then
							connection:Disconnect()
							connection = nil
							toggleState = false
							funct(toggleState)
							tweenService:Create(Check, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(255, 0, 0)}):Play()
							return
						end

						local success, err = pcall(function()
							toggleState = true
							connection = runService.Heartbeat:Connect(function()
								funct(toggleState)
							end)
							tweenService:Create(Check, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(85, 255, 0)}):Play()
						end)

						if not success then
							warn("Failed to connect:", err)
						end
					end)
				end)
			end

			function Debirs.ActiveB(name, funct)
				order += 1
				local Active = Instance.new('TextButton', SectionFunctions)
				Active.Size = UDim2.new(0, 300, 0, 45)
				Active.LayoutOrder = order
				Active.MaxVisibleGraphemes = 0

				local Check = Instance.new('Frame', Active)
				Check.Size = UDim2.new(0, 15, 0, 15)
				Check.Position = UDim2.new(0.950, 0, 0, 0)

				local Box = Instance.new('TextBox', Active)
				Box.Size = UDim2.new(0, 90, 0, 35)
				Box.Position = UDim2.new(0.625, 0, 0.111, 0)
				Box.Text = ''

				local Title = Instance.new('TextLabel', Active)
				Title.Size = UDim2.new(0, 175, 0, 35)
				Title.Position = UDim2.new(0.014, 0, 0.111, 0)
				Title.Text = name
				Title.TextXAlignment = Enum.TextXAlignment.Left

				ApplyTheme(Active, Active.ClassName)
				ApplyTheme(Check, Title.ClassName)
				ApplyTheme(Box, Box.ClassName)
				ApplyTheme(Title, Title.ClassName)
				UICorner(Active)
				UICorner(Box)
				UICorner(Check)
				Check.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
				Title.BackgroundTransparency = 1

				local toggleState = false
				local connection = nil

				local success, err = pcall(function()
					Active.MouseButton1Click:Connect(function()
						if Box.Text == '' then return end
						tweenService:Create(Check, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(85, 255, 0)}):Play()
						funct(funct(Box.Text))
						wait(0.15)
						tweenService:Create(Check, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(255, 0, 0)}):Play()
					end)
				end)
			end

			function Debirs.ToggleB(name, funct)
				order += 1
				local Active = Instance.new('TextButton', SectionFunctions)
				Active.Size = UDim2.new(0, 300, 0, 45)
				Active.LayoutOrder = order
				Active.MaxVisibleGraphemes = 0

				local Check = Instance.new('Frame', Active)
				Check.Size = UDim2.new(0, 15, 0, 15)
				Check.Position = UDim2.new(0.950, 0, 0, 0)

				local Box = Instance.new('TextBox', Active)
				Box.Size = UDim2.new(0, 90, 0, 35)
				Box.Position = UDim2.new(0.625, 0, 0.111, 0)
				Box.Text = ''

				local Title = Instance.new('TextLabel', Active)
				Title.Size = UDim2.new(0, 175, 0, 35)
				Title.Position = UDim2.new(0.014, 0, 0.111, 0)
				Title.Text = name
				Title.TextXAlignment = Enum.TextXAlignment.Left

				ApplyTheme(Active, Active.ClassName)
				ApplyTheme(Check, Title.ClassName)
				ApplyTheme(Box, Box.ClassName)
				ApplyTheme(Title, Title.ClassName)
				UICorner(Active)
				UICorner(Box)
				UICorner(Check)
				Check.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
				Title.BackgroundTransparency = 1

				local toggleState = false
				local connection = nil
				local success, err = pcall(function()
					Active.MouseButton1Click:Connect(function()
						if Box.Text == '' then return end
						if connection then
							connection:Disconnect()
							connection = nil
							toggleState = false
							funct(toggleState)
							tweenService:Create(Check, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(255, 0, 0)}):Play()
							return
						end

						local success, err = pcall(function()
							toggleState = true
							connection = runService.Heartbeat:Connect(function()
								funct(toggleState, Box.Text)
							end)
							tweenService:Create(Check, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(85, 255, 0)}):Play()
						end)

						if not success then
							warn("Failed to connect:", err)
						end
					end)
				end)
			end

			function Debirs.BindActive(name, funct)
				order += 1
				local bind = nil  -- Явная инициализация переменной
				local Active = Instance.new('TextButton', SectionFunctions)
				Active.Size = UDim2.new(0, 300, 0, 45)
				Active.LayoutOrder = order
				Active.MaxVisibleGraphemes = 0

				local Check = Instance.new('Frame', Active)
				Check.Size = UDim2.new(0, 15, 0, 15)
				Check.Position = UDim2.new(0.950, 0, 0, 0)

				local Box = Instance.new('TextLabel', Active)
				Box.Size = UDim2.new(0, 50, 0, 35)
				Box.Position = UDim2.new(0.692, 0, 0.111, 0)
				Box.Text = '...'

				local Title = Instance.new('TextLabel', Active)
				Title.Size = UDim2.new(0, 175, 0, 35)
				Title.Position = UDim2.new(0.014, 0, 0.111, 0)
				Title.Text = name
				Title.TextXAlignment = Enum.TextXAlignment.Left

				ApplyTheme(Active, Active.ClassName)
				ApplyTheme(Check, Title.ClassName)
				ApplyTheme(Box, Box.ClassName)
				ApplyTheme(Title, Title.ClassName)
				UICorner(Active)
				UICorner(Box)
				UICorner(Check)
				Check.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
				Title.BackgroundTransparency = 1

				local toggleState = false
				local connection = nil

				local success, err = pcall(function()
					Active.MouseButton1Click:Connect(function()
						if not bind then
							tweenService:Create(Check, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(85, 255, 0)}):Play()
							Box.Text = "Press key..."

							-- Временное соединение для привязки клавиши
							local connection
							connection = userInputService.InputBegan:Connect(function(input, processed)
								if processed then return end

								-- Отписываемся после первой нажатой клавиши
								if connection then
									connection:Disconnect()
									connection = nil
								end

								bind = input.KeyCode
								Box.Text = bind.Name
							end)
						else
							bind = nil
							Box.Text = '...'
							tweenService:Create(Check, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(255, 0, 0)}):Play()
						end
					end)

					-- Постоянный обработчик ввода для выполнения функции
					userInputService.InputBegan:Connect(function(input, processed)
						if processed or not bind or input.KeyCode ~= bind then return end
						funct()  -- Вызов целевой функции
					end)
				end)
			end

			function Debirs.BindToggle(name, funct)
				order += 1
				local bind = nil
				local toggleState = false
				local connection = nil
				local running = false

				-- Создание основных элементов GUI
				local Active = Instance.new('TextButton', SectionFunctions)
				Active.Size = UDim2.new(0, 300, 0, 45)
				Active.LayoutOrder = order
				Active.AutoButtonColor = false
				Active.Text = ""

				local Check = Instance.new('Frame', Active)
				Check.Size = UDim2.new(0, 15, 0, 15)
				Check.Position = UDim2.new(0.950, 0, 0, 0)


				local Box = Instance.new('TextLabel', Active)
				Box.Size = UDim2.new(0, 50, 0, 35)
				Box.Position = UDim2.new(0.692, 0, 0.111, 0)
				Box.Text = '...'
				Box.TextSize = 12
				Box.BackgroundTransparency = 0.8

				local Title = Instance.new('TextLabel', Active)
				Title.Size = UDim2.new(0, 175, 0, 35)
				Title.Position = UDim2.new(0.014, 0, 0.111, 0)
				Title.Text = name
				Title.TextXAlignment = Enum.TextXAlignment.Left

				ApplyTheme(Active, Active.ClassName)
				ApplyTheme(Check, Title.ClassName)
				ApplyTheme(Box, Box.ClassName)
				ApplyTheme(Title, Title.ClassName)
				UICorner(Active)
				UICorner(Box)
				UICorner(Check)
				Check.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
				Title.BackgroundTransparency = 1

				-- Функция для запуска/остановки цикла
				local function toggleLoop()
					running = not running

					if running then
						tweenService:Create(Check, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(0, 255, 0)}):Play()

						-- Запускаем бесконечный цикл
						connection = runService.Heartbeat:Connect(function()
							funct(true)  -- Передаем состояние и время между кадрами
						end)
					else
						tweenService:Create(Check, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 0, 0)}):Play()
						Box.Text = bind and bind.Name or '...'

						-- Останавливаем цикл
						if connection then
							connection:Disconnect()
							connection = nil
						end
						funct(false)  -- Сообщаем о остановке
					end
				end

				-- Обработчик клика для привязки клавиши
				Active.MouseButton1Click:Connect(function()
					if not bind then
						Box.Text = "Press key..."
						local tempConnection
						tempConnection = userInputService.InputBegan:Connect(function(input, processed)
							if processed then return end

							bind = input.KeyCode
							Box.Text = bind.Name

							if tempConnection then
								tempConnection:Disconnect()
							end
						end)
					else
						bind = nil
						Box.Text = '...'
						if running then
							toggleLoop()  -- Автоматически останавливаем при сбросе бинда
						end
					end
				end)

				-- Обработчик нажатия привязанной клавиши
				userInputService.InputBegan:Connect(function(input, processed)
					if processed or not bind or input.KeyCode ~= bind then return end
					toggleLoop()
				end)
			end

			return Debirs
		end

		return Sections
	else
		coreGui:FindFirstChild(Name..'_'..game:GetService('Players').LocalPlayer.UserId):Destroy()
		return CHEAT.Hub(Name)
	end
end

return CHEAT
